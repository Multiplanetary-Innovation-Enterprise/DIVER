# Creates a new release when
name: Create Release

# Controls when the workflow will run
on:
  # Triggers the release creation when changes are pushed onto the master branch
  push:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# The list of tasks to perform
jobs:
  # Builds the messaging library
  build-messaging-library:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-release

     # Builds the messaging library
      - name: Build Messaging
        run: |
          cd "Common/Messaging"
          python setup.py bdist_wheel

      - name: Upload messaging library
        # Upload the built library as an artafact
        uses: actions/upload-artifact@v3
        with:
          name: messaging-library
          path: Common/Messaging/dist/ROV_Messaging*.whl
          retention-days: 1

  # Builds the netowrking library
  build-networking-library:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/setup-release

      # Builds the netowrking library
      - name: Build Networking
        run: |
          cd "Common/Connections"
          python setup.py bdist_wheel

        # Upload the built library as an artafact
      - name: Upload networking library
        uses: actions/upload-artifact@v3
        with:
          name: networking-library
          path: Common/Connections/dist/ROV_Connections*.whl
          retention-days: 1


  # Creates the executable for the Client Program
  build-client-program-application:
    # The type of runner that the job will run on
    runs-on: windows-latest
    needs: [build-messaging-library, build-networking-library]

    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup-release

      - name: Download the library artifacts
        uses: actions/download-artifact@v3

      - name: Install the messaging library
        shell: cmd
        run: |
          cd  messaging-library
          for %%l in (*.whl) do pip install %%l

      - name: Install the networking library
        shell: cmd
        run: |
          cd  networking-library
          for %%l in (*.whl) do pip install %%l

      - name: Check library installs
        run: pip list

      - name: Install additonal libraries
        run: |
          pip install pygame
          pip install keyboard
          pip install PIL

      - name: Run Pyinstaller
        run: |
          cd "Client Program"
          pyinstaller --clean ClientProgram.spec
          cd dist
          ls

      - name: Display warnings
        shell: cmd
        run: |
           cd "Client Program\build\ClientProgram"
           type warn-ClientProgram.txt

        # Upload the client program executable
      - name: Upload client program
        uses: actions/upload-artifact@v3
        with:
          name: client-program
          path: "Client Program/dist"
          retention-days: 1

  # Creates the executable for the ROV Program
  build-rov-program-application:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [build-messaging-library, build-networking-library]

    steps:
      - uses: actions/checkout@v3

      - name: Download the library artifacts
        uses: actions/download-artifact@v3

      - name: Install the messaging library
        run: |
          cd  messaging-library
          for FILE in *; do  pip install $FILE; done

      - name: Install the networking library
        run: |
          cd  networking-library
          for FILE in *; do  pip install $FILE; done

      - name: Check library installs
        run: pip list

      - name: Test import
        run: |
          python -c "import ROVConnections"

      - uses: ./.github/actions/setup-release

      - name: Run Pyinstaller
        run: |
          cd "ROV Program"
          pyinstaller --clean ROVProgram.spec
          cd dist
          ls

        # Upload the rov program executable
      - name: Upload rov program
        uses: actions/upload-artifact@v3
        with:
          name: rov-program
          path: "ROV Program/dist"
          retention-days: 1

  #Creates the actual release
  create-release:
      # The type of runner that the job will run on
      runs-on: ubuntu-latest
      needs: [build-messaging-library, build-networking-library, build-client-program-application, build-rov-program-application]

      steps:
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0 # Required for get previous tag to work

        - uses: ./.github/actions/setup-release

        - name: Download artifacts
          uses: actions/download-artifact@v3

        - name: Get previous version tag
          uses: WyriHaximus/github-action-get-previous-tag@v1
          id: previous-tag
          with:
            fallback: 2.0.0

        - name: Get next minor version
          uses: WyriHaximus/github-action-next-semvers@v1
          id: semvers
          with:
            version: ${{steps.previous-tag.outputs.tag}}

        - name: Bundle client program files into zip
          run: zip client-program.zip client-program/ClientProgram.exe client-program/config.ini

        - name: Bundle rov program files into zip
          run: zip rov-program.zip rov-program/ROVProgram rov-program/config.ini


        - uses: softprops/action-gh-release@v1
          with:
            name: "Release ${{steps.semvers.outputs.minor}}"
            tag_name: "${{steps.semvers.outputs.minor}}"
            fail_on_unmatched_files: true

            files: |
              messaging-library/ROV_Messaging*.whl
              networking-library/ROV_Connections*.whl
              client-program.zip
              rov-program.zip
